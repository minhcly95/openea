namespace ea {

/**

@page tut2 Solve the One-Max problem using the CLI
This page describes how to use the Command Line Interface toolset (CLI) to implement the EA for One Max problem.

@par Tutorial level
Beginner

@par Previous tutorial
@ref tut1

@par Next tutorial
@ref tut3

@tableofcontents

@section tut2-cli The CLI toolset
The library comes with a Command-Line Interface toolset called EA-CLI.
The toolset allows users to modify the algorithm without re-compiling, enable fast prototyping and tuning.
This also make the library accessible to people who don't know C++.
The toolset is available by using the command @cmd{"openea"}, which should be available if you install the
library using @cmd{apt-get install libopenea-cli} or using the script @cmd{install.sh} on git repository.

@note
@cmd{"openea"} is the common entry point for also numerous utilities of the library.
For example, you could use @cmd{"openea doc"} to open this HTML documentation in your default browser
(only available for those who install from git repository).

Here, I describe briefy what you will need to do in order to use the CLI toolset.
-# First, you need to write a stand-alone Evaluator as an add-on class.
-# Then, instead of writing a program, you will write an EAML configuration file for the CLI toolset.
-# Finally, you will run your algorithm by feeding the EAML file to the CLI toolset.

@section tut2-addon Writing an add-on
An add-on is just a custom class users want to add to the system. It won't come with the library,
but it will be available when you use the CLI. Writing an add-on class is just like writing a normal class,
but you need to save it in a specific folder and add some "meta-data" to the class (using macros).
The folder that you need to save your source code (the **add-on folder**) can be queried
by using the command @cmd{"openea addon pwd"}.
Also, an add-on class must have a header file (.h), you cannot write it entirely in a source file (.cpp)
(but it is OK if you want to put everything in the header file by using a ton of inline functions).

@note The command @cmd{"openea addon ..."} will execute the @cmd{"..."} part in the add-on folder.
For example, you can use @cmd{"openea addon nano foo.txt"} to edit a file <code>foo.txt</code>
in the add-on folder.

In this tutorial, we must write for ourselves an Evaluator in order to use the CLI (because it is problem-dependent).
We will call our class <code>OneMaxEvaluator</code>, and create two files <code>OneMaxEvaluator.cpp</code> and
<code>OneMaxEvaluator.h</code> in the add-on folder.
You can use the command @cmd{"openea addon nano ..."} to edit a file directly in the add-on folder
or use @cmd{"openea addon pwd"} to get the folder location and create the files by yourself.
Where you save them in the add-on folder isn't matter, you can save them in any sub-folder or sub-sub-folder of the add-on folder.

Here is the content of the <code>OneMaxEvaluator.h</code> file:

@includelineno Tutorials/OneMax/OneMaxEvaluator.h

And the <code>OneMaxEvaluator.cpp</code> file:

@includelineno Tutorials/OneMax/OneMaxEvaluator.cpp

@note
The namespace of the add-on class isn't matter, you can put it in whichever namespace that you want.

The main task is to override the TypedScalarEvaluator::DoScalarEvaluate() function with the content from the previous tutorial.
The type TypedScalarEvaluator<G> is a specialization of Evaluator, which will handle the underlying casting part for you.
The only thing you need to do is transforming the given genome type of type G (BoolArrayGenome in the case) to a fitness value of type double.

There are also two macros related to defining the meta-data. These macros **must** be defined in the header file.
The first macro is defined at the **public** level of your class:

@dontinclude Tutorials/OneMax/OneMaxEvaluator.h
@skipline EA_TYPEINFO

will define the type information (TypeInfo) of your custom type. Basically, CLI uses an EAML configuration file to build your algorithm,
so every class should have a name called the **EAML Name**. This macro defines the EAML name of your custom class the same
with the real class name defined in your code. Note that you **cannot** define a different EAML name if you use the macro
@ref EA_TYPEINFO_DEFAULT, therefore, <code>%EA_TYPEINFO_DEFAULT(AnotherClassName)</code> would be invalid.
(with other macros, you can, but we will mention them in another tutorial).

The second macro is defined **right after** the definition of your class and must be in a header file:

@skipline REGISTER_ADDON

This macro will add the defined-above type information to the NameService. The NameService is a translation table
between the EAML name and the class' TypeInfo. If your class is not added to the NameService by using this macro,
the CLI has no way to know what is the EAML name of your custom class.

You should not compile it normally, the library provides you a proper and convenient way to do that. Simply use the command:

@code
openea update
@endcode

Now you are ready to use your add-on class in the CLI toolset.

@note
The limitation of writing add-on classes is you cannot add any other external library dependency to your code.
To write custom classes which also link to external libraries, you need to write a **plugin** instead of
add-on classes. We will learn how to write a plugin in future tutorial.

@section tut2-eaml Writing an EAML file
After adding your add-on class to the system, the remaining tasks are easy.
Now you don't need to write any C++ line of code anymore, you only need to translate your algorithm description
to an EAML configuration file. If you don't remember the description, check the previous tutorial @ref tut1.
Here is the EAML file for the One-Max problem.

@includelineno Tutorials/OneMax/OneMax.eaml

The file should explain itself.
You can notice that EAML syntax is the same with XML syntax. But there are some additional requirements.
First, the root element must be a Strategy name such as <b>@eamltag{EvolutionStrategy}</b> with an attribute @cmd{"size"} set to
the population size. Inside the root element, operator groups are added.
Notice that the name of operator group tags are in lower case (@eamltag{initializer}, @eamltag{mutators}, etc.).
Also notice that the tags @eamltag{mutators}, @eamltag{recombinators}, @eamltag{hooks} have the suffix "-s",
that means multiple operators of those groups can be added (e.g. @eamltag{hooks} has two children).
How can I know which fields need to be filled? Just see the API documentation of EvolutionStrategy.

In the EAML file, you must use EAML names. You can find the name from the API document of each class or just simply access this page:
@ref operators. The names of arguments of an operator are also described in the API document.
For example, from this page: RandomArrayInitializer, you can find out the EAML name and the EAML attribute names of
@cmd{ BoolRandomArrayInitializer}, which requires an attribute @cmd{"length"} for the length of the bit string.

Mutator and Recombinator must be added in a special way. We already knew in the previous tutorial that
those operators must be used with Operator::CreateBase(). Mutator must be included with a mutation rate wrapped in a MetaMutator
and Recombinator must come with a parent Selector and an offspring ratio wrapped in a MetaRecombinator.
In the EAML file, they must follow in this template (which you can check in the API documentation of MetaMutator and MetaRecombinator):

@code
<MetaRecombinator ratio="...">
	<recombinator>
		...
	</recombinator>
	<selector>
		...
	</selector>
</MetaRecombinator>
@endcode

for Recombinator. And for Mutator:
@code
<MetaMutator rate="...">
	<mutator>
		...
	</mutator>
</MetaMutator>
@endcode

Now, save the file with the extension <code>.eaml</code> (e.g. <code>OneMax.eaml</code>).
Our algorithm is ready to be run.

@section tut2-run Using the CLI toolset
To run our EAML file, use this command (you can replace <code>OneMax.eaml</code> to your file name):

@code
openea run OneMax.eaml
@endcode

Example output (some lines of the evolution process are omitted):

@code
[2017-06-27 11:47:50.479327] PluginLoader: Loaded 0 plugin(s).
[2017-06-27 11:47:50.479457] CLI: Reading OneMax.eaml
[2017-06-27 11:47:50.479791] CLI: "EvolutionStrategy" reconstructed
[2017-06-27 11:47:50.479837] CLI: BackupHook not found. Default one added to folder "~/.openea/.backup".
[2017-06-27 11:47:50.491210] Parallel processing is enabled, number of threads = 4
[2017-06-27 11:47:50.492406] BackupHook::DoInitial: Cleared 1 file(s) in "~/.openea/.backup".
[2017-06-27 11:47:50.492437] Population initialized, evaluation 100
[2017-06-27 11:47:50.492459] Evolution started from generation 0, evaluation 100
Gen       1	Best =         33	00010101111010101110101101101111011111001110111110
Gen       2	Best =         36	11101111011010100011100111111111101111001111111100
Gen       3	Best =         37	10111111010111011111000011111110111111001110111110
...
Gen      21	Best =         49	11111111111111111111111111111111111111111111111110
Gen      22	Best =         49	11111111111111111111111111111111111111111111111110
Gen      23	Best =         50	11111111111111111111111111111111111111111111111111
[2017-06-27 11:47:50.514198] FitnessTerminationHook: Reached fitness value = 50 == 50. Terminating...
[2017-06-27 11:47:50.514893] BackupHook: Backup saved to "~/.openea/.backup/000023.eabak".
[2017-06-27 11:47:50.514950] Evolution stopped at generation 23, evaluation 2400
[2017-06-27 11:47:50.514988] Time Report: [S] 0.215576 [M] 0.234679 [E] 0.231562 [F] 0.0530683 [Total] 0.814752 ms
@endcode

The output has some more messages for us, compared to the one of the previous tutorial.
The most important feature is that the CLI toolset will automatically save back-up file for you when the evolution process ends.
You can, of course, add a BackupHook to the previous tutorial, but for the CLI toolset, it will be automatically added.

@note
A BackupHook is a Hook which will save back-up file at the end of the evolution.
You can also save back-up files after a few generations. Read the API documentation for more details.

If you saw a error message like this:

@code
Fatal Error: ../src/rtoc/NameService.cpp:41 : CLASS_NAME_NOT_EXIST - OneMaxEvaluator class does not exist in Name service.
@endcode

That means you didn't compile the new add-on files in the previous step.
In that case, run @cmd{"openea update"} to compile the add-on, then @cmd{"openea run"} should work properly.

The great thing of using an interface like this CLI toolset is that you don't need to recompile anything anymore.
If you want that change the population size or the genome length for example, you can simply edit the EAML file and call
@cmd{"openea run"} again. @cmd{"openea update"} is not required, unless you also changed the code of your add-on class.

@note
The CLI toolset even has a faster method to set the value of the attributes. We will look into it in the next tutorial.

@section tut2-conclusion Conclusion
This tutorial has shown you how to use the CLI toolset to solve the One-Max problem.
The usual process to run an algorithm using the CLI is:

- Write an add-on class in the add-on folder.
- Compile the add-on class using @cmd{"openea update"}.
- Write an EAML configuration file describing the algorithm.
- Call @cmd{"openea run file_name.eaml"} to run the the EAML file.

The next tutorial will show you how to use CLI options to add more features to the algorithm:

@ref tut3

@subsection tut2-note Note
Similar to the previous tutorial, the order of operator groups is not important.
The execution cycle will be always the same.
However, the order of Mutator, Recombinator and Hook in the same operator group is matter.
In the above example, FitnessTerminationHook will always run after StandardOutputHook,
because of the order of them in the EAML file.

If we call the root level of the EAML file level 1 (the tag @eamltag{Population}), then

- The element names at odd levels (1, 3, 5, etc.) are always the name of classes
(EAML names - e.g. @eamltag{Population}, @eamltag{MetaRecombinator}, @eamltag{FlipBitMutation}, @eamltag{OneMaxEvaluator}).
Class names are always in upper camel case (<code>UpperCamelCase</code>).

- The element names at even levels (2, 4, 6, etc.) are always the name of attributes
(EAML attributes - e.g.  @eamltag{initializer},  @eamltag{recombinator},  @eamltag{hooks}).
Attribute names are always in lower case connected by dashes (<code>lower-case</code>).

Remember this rule might help you remembering the template of EAML format.

MetaMutator and MetaRecombinator are real class names, which store addition information of a Mutator and a Recombinator
such as rate, parent Selector and ratio.

 */

}
